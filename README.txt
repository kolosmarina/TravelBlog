Final Task. Web Project - Travel blog
- Приложение реализовать применяя технологии Servlet и JSP.
- Архитектура приложения должна соответствовать шаблонам Layered architecture и MVC. Controller может быть только двух видов: контроллер роли или контроллер приложения.

Требования к БД.
- Информация о предметной области должна хранится в БД.
- Часть данных в базе хранятся на кириллице, рекомендуется применять кодировку utf-8.
- Технология доступа к БД только JDBC.
- Для работы с БД в приложении должен быть реализован потокобезопасный пул соединений, использовать synchronized и volatile запрещено.
- При проектировании БД рекомендуется использовать не менее 6-и таблиц.
- Работу с данными в приложении осуществлять посредством шаблонов DAO или Repository.
- Реализовать защиту от sql injection.

Базовые требования к приложению
- Интерфейс приложения должен быть локализован; выбор из языков: EN|BE|DE etc.
- Приложение должно корректно обрабатывать возникающие исключительные ситуации, в том числе вести их логи.
В качестве логгера использовать Log4J2/SLF4J.
- Классы и другие сущности приложения должны быть грамотно структурированы по пакетам и иметь отражающую их функциональность название.
- При реализации бизнес-логики приложения следует при необходимости использовать шаблоны проектирования
(например, шаблоны GoF: Factory Method, Command, Builder, Strategy, State, Observer, Singleton, Proxy etc).
- Для хранения пользовательской информации между запросами использовать сессию.
- Для перехвата и корректировки объектов запроса (request) и ответа (response) применить фильтры.
- Разрешается использовать технологии AspectJ и Web-services.
- При реализации страниц JSP следует использовать теги библиотеки JSTL.
- Использовать скриплеты запрещено.
- При реализации пользовательского интерфейса разрешается использовать любые технологии front-end разработки (js, AJAX).
- Реализовать защиту от cross site scripting (xss).
- Реализовать защиту от повторного выполнения запроса нажатием F5.
- Реализовать собственные теги.
- Просмотр “длинных списков” желательно организовывать в постраничном режиме.
- Валидацию входных данных производить на клиенте и на сервере.
- Документацию к проекту необходимо оформить согласно требованиям javadoc.
- Оформление кода должно соответствовать Java Code Convention.
- При развертывании приложения разрешается использовать технологию Maven или Gradle.
- Приложение должно содержать тесты TestNG, JUnit, Mockito или EasyMock.
- Приложение должно быть размещено на GitHub или Bitbucket.

Минимальные требования к функциональности приложения
- Авторизация (sign in) и выход (sign out) в/из системы.
- Регистрация пользователя и/или добавление артефакта предметной области системы.
- Просмотр информации (например: просмотр всех ставок тотализатора, статистики заказов, счетов и т.д.).
- Удаление информации (например: отмена заказа, удаление сущности и т.д.).
- Добавление и модификация информации (например: создать и отредактировать товар, создать и отредактировать заказ и т.д.).

Предметная область разработки
Система Travel blog позволяет:
- размещать информацию о путешествиях (описание постов с загружаемыми фото, описание фото, комментарии, теги, лайки);
- просматривать информацию с учетом различных видов сортировки (по популярности, дате, тегам, пользователям);
- удалять информацию;
- управлять доступом к информации (пользователь с ролью admin может ограничивать доступ к информации пользователям).

Роли в приложении:
Незалогиненный пользователь (anonymous) может ->
- просматривать информацию (без доступа к странице администратора)
Залогиненный пользователь (user) может ->
- просматривать информацию (используя различные виды сортировки: по дате, популярности, пользователю, тегу)
- опубликовывать новые посты (с обязательным наличием хотя бы одной фото, изменять главное фото поста)
- опубликовывать комментарии
- ставить лайки
- удалять информацию, которую ранее опубликовал (посты, комментарии, лайки)
Администратор (admin) может ->
- получать список пользователей
- блокировать и разблокировать аккаунты пользователей
- осуществлять действия как залогиненный пользователь

Use-Case диаграмма системы расположена по пути <project root>/UseCaseDiagram.png

Инструкция по установке приложения:
1) создать базу данных с начальными данными из скрипта расположенного по пути <project root>/sql/travelling.sql
(указанные абсолютные пути к фото в базе данных в таблице "photo" стоит изменить на собственные абсолютные пути к фото на устройстве,
 на котором запускается проект и есть доступные фото для использования)
2) создать базу данных для тестов с начальными данными из скрипта расположенного по пути <project root>/sql/travellingTest.sql
(изменить абсолютные пути к фото)
3) отредактировать файл, расположенный по пути <project root>/src/main/resources/application.properties
- указать url, username, password
-db.photo.storage= путь к папке для сохранения новых загружаемых фото пользователями
-data.storage.for.letters= путь к файлу, в котором указаны логин и пароль для рассылки писем об успешной регистрации с гугл аккаунта
(в файле данные введены в формате: 1-ая строка - логин, 2-ая строка - пароль)
4) отредактировать файл, расположенный по пути <project root>/src/main/resources/applicationTest.properties
(данные указать для работы с тестовой базой данных)
5) собрать проект с помощью maven: mvn clean package
6) архив, расположенный по пути <project root>/target/travel_blog.war скопировать в tomcat в папку webapps и запустить tomcatgit add .